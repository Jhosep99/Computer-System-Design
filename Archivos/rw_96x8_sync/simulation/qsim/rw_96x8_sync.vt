// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2021 16:39:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rw_96x8_sync
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rw_96x8_sync_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg [7:0] data_in;
reg write;
// wires                                               
wire [7:0] data_Out;

// assign statements (if any)                          
rw_96x8_sync i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.data_Out(data_Out),
	.write(write)
);
initial 
begin 
#1000000 $finish;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #450000 1'b1;
	data_in[7] = #150000 1'b0;
	data_in[7] = #150000 1'b1;
	data_in[7] = #150000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #450000 1'b1;
	data_in[6] = #150000 1'b0;
	data_in[6] = #150000 1'b1;
	data_in[6] = #150000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #150000 1'b1;
	data_in[5] = #150000 1'b0;
	data_in[5] = #150000 1'b1;
	data_in[5] = #150000 1'b0;
	data_in[5] = #150000 1'b1;
	data_in[5] = #150000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
	data_in[4] = #150000 1'b1;
	data_in[4] = #450000 1'b0;
	data_in[4] = #150000 1'b1;
	data_in[4] = #150000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #150000 1'b1;
	data_in[3] = #450000 1'b0;
	data_in[3] = #150000 1'b1;
	data_in[3] = #150000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #150000 1'b1;
	data_in[2] = #450000 1'b0;
	data_in[2] = #150000 1'b1;
	data_in[2] = #150000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b1;
	data_in[1] = #600000 1'b0;
	data_in[1] = #150000 1'b1;
	data_in[1] = #150000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #150000 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #150000 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #150000 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b1;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #150000 1'b1;
	address[6] = #150000 1'b0;
	address[6] = #300000 1'b1;
	address[6] = #300000 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #300000 1'b1;
	address[5] = #300000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
	address[4] = #150000 1'b1;
	address[4] = #150000 1'b0;
	address[4] = #150000 1'b1;
	address[4] = #300000 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #150000 1'b1;
	address[3] = #150000 1'b0;
	address[3] = #300000 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	address[2] = #150000 1'b1;
	address[2] = #150000 1'b0;
	address[2] = #150000 1'b1;
	address[2] = #300000 1'b0;
	address[2] = #150000 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	address[1] = #150000 1'b1;
	address[1] = #150000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #150000 1'b0;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #150000 1'b1;
	clock = #270000 1'b0;
	clock = #60000 1'b1;
	clock = #120000 1'b0;
	clock = #150000 1'b1;
	clock = #150000 1'b0;
end 

// write
initial
begin
	write = 1'b0;
	write = #10000 1'b1;
	write = #110000 1'b0;
	write = #260000 1'b1;
	write = #80000 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

